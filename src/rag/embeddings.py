"""
Embeddings Service for Business Rules

This module handles generating embeddings for business rules using LlamaIndex and Ollama.
"""
from typing import List, Optional
import logging
from llama_index.embeddings.ollama import OllamaEmbedding

logger = logging.getLogger(__name__)


class EmbeddingsService:
    """Service for generating embeddings using Ollama"""
    
    def __init__(
        self,
        base_url: str = "http://localhost:11434",
        model_name: str = "nomic-embed-text",
        embed_batch_size: int = 10
    ):
        self.base_url = base_url
        self.model_name = model_name
        self.embed_batch_size = embed_batch_size
        self.embedding_model = None
        
    def initialize(self) -> bool:
        """Initialize the embedding model"""
        try:
            self.embedding_model = OllamaEmbedding(
                model_name=self.model_name,
                base_url=self.base_url,
                embed_batch_size=self.embed_batch_size,
            )
            logger.info(f"Initialized embedding model: {self.model_name}")
            return True
        except Exception as e:
            logger.error(f"Failed to initialize embedding model: {str(e)}")
            return False
    
    def generate_embeddings(self, texts: List[str]) -> Optional[List[List[float]]]:
        """Generate embeddings for a list of texts"""
        if not self.embedding_model:
            logger.error("Embedding model not initialized")
            return None
        
        try:
            logger.info(f"Generating embeddings for {len(texts)} texts")
            embeddings = self.embedding_model.get_text_embedding_batch(texts)
            logger.info(f"Generated {len(embeddings)} embeddings")
            return embeddings
        except Exception as e:
            logger.error(f"Failed to generate embeddings: {str(e)}")
            return None
    
    def generate_single_embedding(self, text: str) -> Optional[List[float]]:
        """Generate embedding for a single text"""
        if not self.embedding_model:
            logger.error("Embedding model not initialized")
            return None
        
        try:
            embedding = self.embedding_model.get_text_embedding(text)
            return embedding
        except Exception as e:
            logger.error(f"Failed to generate single embedding: {str(e)}")
            return None
    
    def get_embedding_dimension(self) -> int:
        """Get the dimension of embeddings generated by this model"""
        # This is specific to the nomic-embed-text model
        # Different models will have different dimensions
        if "nomic-embed-text" in self.model_name:
            return 768
        elif "all-minilm" in self.model_name:
            return 384
        else:
            # Default assumption, may need adjustment based on actual model
            return 384